import React, { useState, useEffect, useRef } from 'react';
import { Send, MessageCircle, Gamepad2, Palette, User, Lock, Wifi, WifiOff } from 'lucide-react';
import { ref, push, onValue, serverTimestamp, set } from 'firebase/database';
import { rtdb } from './firebase/config';

const App = () => {
  const [currentUser, setCurrentUser] = useState(null);
  const [activeSection, setActiveSection] = useState('chat');
  const [messages, setMessages] = useState([]);
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [gameStates, setGameStates] = useState({
    rps: { scores: { player1: 0, player2: 0 } },
    tictactoe: { board: Array(9).fill(null), currentPlayer: 'X', winner: null, scores: { X: 0, O: 0 } }
  });

  // Online/Offline Status
  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  // Real-time Messages Listener
  useEffect(() => {
    if (!currentUser) return;

    const messagesRef = ref(rtdb, 'messages');
    const unsubscribe = onValue(messagesRef, (snapshot) => {
      const data = snapshot.val();
      if (data) {
        const messagesList = Object.entries(data).map(([key, value]) => ({
          id: key,
          ...value
        }));
        setMessages(messagesList.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)));
      }
    });

    return () => unsubscribe();
  }, [currentUser]);

  // Real-time Game State Sync
  useEffect(() => {
    if (!currentUser) return;

    const gameRef = ref(rtdb, 'gameStates');
    const unsubscribe = onValue(gameRef, (snapshot) => {
      const data = snapshot.val();
      if (data) {
        setGameStates(data);
      }
    });

    return () => unsubscribe();
  }, [currentUser]);

  // Update game state in Firebase
  const updateGameState = (newGameStates) => {
    setGameStates(newGameStates);
    if (currentUser) {
      const gameRef = ref(rtdb, 'gameStates');
      set(gameRef, newGameStates);
    }
  };

  // Authentication Component
  const AuthScreen = () => {
    const [name, setName] = useState('');
    const [passcode, setPasscode] = useState('');
    const [error, setError] = useState('');

    const handleLogin = () => {
      const validUsers = {
        'Saman': 'chudail',
        'Rishabh': '1234'
      };

      if (validUsers[name] === passcode) {
        setCurrentUser({ name, id: name });
        setError('');
        
        // Update user presence in Firebase
        const userRef = ref(rtdb, `users/${name}`);
        set(userRef, {
          name,
          lastSeen: serverTimestamp(),
          isOnline: true
        });
      } else {
        setError('Invalid credentials.');
      }
    };

    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center p-4 px-4 sm:px-6 lg:px-8">
        <div className="bg-white rounded-3xl shadow-xl p-6 sm:p-8 w-full max-w-sm sm:max-w-md">
          <div className="text-center mb-6 sm:mb-8">
            <div className="bg-purple-100 rounded-full w-12 h-12 sm:w-16 sm:h-16 flex items-center justify-center mx-auto mb-3 sm:mb-4">
              <Lock className="text-purple-600" size={20} />
            </div>
            <h1 className="text-xl sm:text-2xl font-bold text-gray-800 mb-2">CHAT APP</h1>
            <p className="text-sm sm:text-base text-gray-600">Enter your credentials to access</p>
            
            {/* Connection Status */}
            <div className={`flex items-center justify-center mt-2 sm:mt-3 text-xs sm:text-sm ${
              isOnline ? 'text-green-600' : 'text-red-600'
            }`}>
              {isOnline ? <Wifi size={14} className="sm:w-4 sm:h-4" /> : <WifiOff size={14} className="sm:w-4 sm:h-4" />}
              <span className="ml-1">{isOnline ? 'Online' : 'Offline'}</span>
            </div>
          </div>

          <div className="space-y-3 sm:space-y-4">
            <div>
              <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1 sm:mb-2">Username</label>
              <input
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                className="w-full px-3 sm:px-4 py-2 sm:py-3 text-sm sm:text-base rounded-xl border border-gray-200 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
                placeholder="Enter your username"
              />
            </div>
            <div>
              <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1 sm:mb-2">Passcode</label>
              <input
                type="password"
                value={passcode}
                onChange={(e) => setPasscode(e.target.value)}
                className="w-full px-3 sm:px-4 py-2 sm:py-3 text-sm sm:text-base rounded-xl border border-gray-200 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
                placeholder="Enter passcode"
                onKeyPress={(e) => e.key === 'Enter' && handleLogin()}
              />
            </div>
            {error && <p className="text-red-500 text-xs sm:text-sm">{error}</p>}
            <button
              onClick={handleLogin}
              disabled={!isOnline}
              className="w-full bg-purple-500 hover:bg-purple-600 disabled:bg-gray-300 disabled:cursor-not-allowed text-white font-medium py-2 sm:py-3 text-sm sm:text-base rounded-xl transition-colors"
            >
              {isOnline ? 'Login' : 'No Internet Connection'}
            </button>
          </div>

          {/* <div className="mt-4 sm:mt-6 text-center text-xs sm:text-sm text-gray-500">
            <p>Demo credentials:</p>
            <p className="font-mono text-xs sm:text-sm">user1 / 1234 or user2 / 5678</p>
          </div> */}
        </div>
      </div>
    );
  };

  // Navigation Component
  const Navigation = () => {
    const navItems = [
      { id: 'chat', icon: MessageCircle, label: 'Chat' },
      { id: 'games', icon: Gamepad2, label: 'Games' },
      { id: 'creative', icon: Palette, label: 'Creative' }
    ];

    const handleLogout = () => {
      // Update user presence on logout
      if (currentUser) {
        const userRef = ref(rtdb, `users/${currentUser.name}`);
        set(userRef, {
          name: currentUser.name,
          lastSeen: serverTimestamp(),
          isOnline: false
        });
      }
      setCurrentUser(null);
    };

    return (
      <nav className="bg-white/80 backdrop-blur-md shadow-sm border-b sticky top-0 z-50">
        <div className="max-w-6xl mx-auto px-2 sm:px-4">
          <div className="flex justify-between items-center h-14 sm:h-16">
            <div className="flex items-center space-x-2 sm:space-x-3">
              <div className="bg-gradient-to-r from-purple-400 to-pink-400 rounded-full w-6 h-6 sm:w-8 sm:h-8 flex items-center justify-center">
                <User className="text-white" size={14} />
              </div>
              <div className="flex items-center space-x-1 sm:space-x-2">
                <span className="font-semibold text-gray-800 text-sm sm:text-base">{currentUser?.name}</span>
                {isOnline ? (
                  <div className="w-1.5 h-1.5 sm:w-2 sm:h-2 bg-green-400 rounded-full"></div>
                ) : (
                  <div className="w-1.5 h-1.5 sm:w-2 sm:h-2 bg-red-400 rounded-full"></div>
                )}
              </div>
            </div>

            <div className="flex space-x-0.5 sm:space-x-1">
              {navItems.map(({ id, icon: Icon, label }) => (
                <button
                  key={id}
                  onClick={() => setActiveSection(id)}
                  className={`flex items-center space-x-1 sm:space-x-2 px-2 sm:px-4 py-1.5 sm:py-2 rounded-lg sm:rounded-xl transition-all duration-200 ${
                    activeSection === id
                      ? 'bg-purple-100 text-purple-700 shadow-sm'
                      : 'text-gray-600 hover:bg-gray-50 hover:text-gray-800'
                  }`}
                >
                  <Icon size={16} className="sm:w-4 sm:h-4" />
                  <span className="font-medium text-xs sm:text-sm hidden xs:inline">{label}</span>
                </button>
              ))}
            </div>

            <button
              onClick={handleLogout}
              className="text-gray-600 hover:text-gray-800 px-2 sm:px-3 py-1 rounded-lg hover:bg-gray-50 transition-all text-xs sm:text-sm"
            >
              Logout
            </button>
          </div>
        </div>
      </nav>
    );
  };

  // Simple Chat Component with smart auto-scroll
const ChatRoom = () => {
  const [newMessage, setNewMessage] = useState('');
  const messagesEndRef = useRef(null);
  const messagesContainerRef = useRef(null);
  const [isUserScrolledUp, setIsUserScrolledUp] = useState(false);
  const [shouldAutoScroll, setShouldAutoScroll] = useState(true);

  // Function to scroll to bottom (instant - no upward movement)
  const scrollToBottom = () => {
    if (messagesContainerRef.current) {
      messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;
    }
  };

  // Check if user is scrolled to bottom
  const isScrolledToBottom = () => {
    const container = messagesContainerRef.current;
    if (!container) return false;
    
    const threshold = 100; // pixels from bottom
    return container.scrollHeight - container.scrollTop <= container.clientHeight + threshold;
  };

  // Handle scroll events
  const handleScroll = () => {
    const isAtBottom = isScrolledToBottom();
    setIsUserScrolledUp(!isAtBottom);
    setShouldAutoScroll(isAtBottom);
  };

  // Auto-scroll when new messages arrive (only if user is at bottom)
  useEffect(() => {
    if (shouldAutoScroll) {
      scrollToBottom();
    }
  }, [messages, shouldAutoScroll]);

  // Initial scroll to bottom when component mounts
  useEffect(() => {
    scrollToBottom();
  }, []);

  const sendMessage = async () => {
    if (newMessage.trim() && currentUser && isOnline) {
      try {
        const messagesRef = ref(rtdb, 'messages');
        await push(messagesRef, {
          text: newMessage,
          sender: currentUser.name,
          timestamp: serverTimestamp(),
          createdAt: new Date().toISOString()
        });
        setNewMessage('');
        // Force auto-scroll when user sends a message (instant)
        setShouldAutoScroll(true);
        setTimeout(() => {
          if (messagesContainerRef.current) {
            messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;
          }
        }, 50);
      } catch (error) {
        console.error('Error sending message:', error);
      }
    }
  };

  const addEmoji = (emoji) => {
    setNewMessage(newMessage + emoji);
  };

  // Function to scroll to bottom when button is clicked (also instant)
  const handleScrollToBottom = () => {
    setShouldAutoScroll(true);
    if (messagesContainerRef.current) {
      messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;
    }
  };

  return (
    <div className="flex flex-col h-[calc(100vh-80px)] sm:h-[calc(100vh-120px)] bg-white rounded-2xl sm:rounded-3xl shadow-lg overflow-hidden mx-2 sm:mx-0 relative">
      {/* Chat Header */}
      <div className="bg-gradient-to-r from-purple-500 to-pink-500 text-white p-3 sm:p-4">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-lg sm:text-xl font-bold mb-1">Chat App 💬</h2>
            <p className="text-purple-100 text-xs sm:text-sm">Start Messaging</p>
          </div>
          <div className={`flex items-center space-x-1 text-xs sm:text-sm ${
            isOnline ? 'text-green-200' : 'text-red-200'
          }`}>
            {isOnline ? <Wifi size={14} className="sm:w-4 sm:h-4" /> : <WifiOff size={14} className="sm:w-4 sm:h-4" />}
            <span className="hidden sm:inline">{isOnline ? 'Connected' : 'Offline'}</span>
          </div>
        </div>
      </div>

      {/* Messages Area with auto-scroll */}
      <div 
        ref={messagesContainerRef}
        onScroll={handleScroll}
        className="flex-1 overflow-y-auto p-2 sm:p-4 bg-gradient-to-b from-gray-50 to-white"
      >
        {messages.length === 0 ? (
          <div className="text-center text-gray-500 mt-8 sm:mt-16">
            <MessageCircle size={48} className="sm:w-16 sm:h-16 mx-auto mb-3 sm:mb-4 opacity-30" />
            <p className="text-base sm:text-lg mb-2">No messages yet</p>
            <p className="text-xs sm:text-sm">Start the conversation! 🚀</p>
          </div>
        ) : (
          <>
            <div className="space-y-3 sm:space-y-4">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${message.sender === currentUser.name ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-xs sm:max-w-sm px-3 sm:px-4 py-2 sm:py-3 rounded-2xl shadow-sm ${
                      message.sender === currentUser.name
                        ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white'
                        : 'bg-white text-gray-800 border border-gray-100'
                    }`}
                  >
                    <div className="flex items-center space-x-2 mb-1">
                      <p className={`text-xs font-medium ${
                        message.sender === currentUser.name ? 'text-purple-200' : 'text-purple-600'
                      }`}>
                        {message.sender}
                      </p>
                    </div>
                    <p className="text-xs sm:text-sm leading-relaxed">{message.text}</p>
                    <p className={`text-xs mt-1 ${
                      message.sender === currentUser.name ? 'text-purple-200' : 'text-gray-500'
                    }`}>
                      {message.createdAt ? new Date(message.createdAt).toLocaleTimeString([], { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      }) : 'Sending...'}
                    </p>
                  </div>
                </div>
              ))}
            </div>
            {/* Invisible element to scroll to */}
            <div ref={messagesEndRef} />
          </>
        )}
      </div>

      {/* Scroll to bottom button - appears when user scrolled up */}
      {isUserScrolledUp && messages.length > 0 && (
        <div className="absolute bottom-20 sm:bottom-24 right-4 sm:right-6 z-10">
          <button
            onClick={handleScrollToBottom}
            className="bg-purple-500 hover:bg-purple-600 text-white rounded-full p-2 sm:p-3 shadow-lg transition-all transform hover:scale-105 flex items-center space-x-1 sm:space-x-2"
          >
            <svg 
              className="w-4 h-4 sm:w-5 sm:h-5" 
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
            </svg>
            <span className="text-xs hidden sm:inline">New messages</span>
          </button>
        </div>
      )}

      {/* Message Input */}
      <div className="p-2 sm:p-4 bg-white border-t border-gray-100">
        {/* Emoji Bar */}
        <div className="flex space-x-1 sm:space-x-2 mb-2 sm:mb-3 overflow-x-auto scrollbar-hide">
          {['😊', '😂', '❤️', '👍', '🎉', '🔥', '💯', '🤔', '😍', '🥳'].map((emoji) => (
            <button
              key={emoji}
              onClick={() => addEmoji(emoji)}
              className="text-base sm:text-xl hover:bg-gray-100 rounded-lg p-1 sm:p-2 flex-shrink-0 transition-colors"
            >
              {emoji}
            </button>
          ))}
        </div>
        
        {/* Input and Send */}
        <div className="flex space-x-2 sm:space-x-3">
          <input
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
            placeholder={isOnline ? "Type your message... " : "No internet connection"}
            disabled={!isOnline}
            className="flex-1 px-3 sm:px-4 py-2 sm:py-3 text-sm sm:text-base rounded-xl border border-gray-200 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all disabled:bg-gray-100 disabled:cursor-not-allowed"
          />
          <button
            onClick={sendMessage}
            disabled={!isOnline || !newMessage.trim()}
            className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 disabled:from-gray-300 disabled:to-gray-400 disabled:cursor-not-allowed text-white px-3 sm:px-4 py-2 sm:py-3 rounded-xl transition-all transform hover:scale-105 shadow-lg"
          >
            <Send size={16} className="sm:w-5 sm:h-5" />
          </button>
        </div>
      </div>
    </div>
  );
};

  const GamesSection = () => {
    return (
      <div className="space-y-4 sm:space-y-6 p-2 sm:p-4">
        <div className="bg-gradient-to-r from-purple-500 to-pink-500 rounded-t-2xl sm:rounded-t-3xl shadow-sm p-4 sm:p-6 text-white text-center mx-2 sm:mx-0">
          <h2 className="text-xl sm:text-2xl font-bold mb-2">🎮 Fun Games</h2>
          <p className="text-purple-100 text-sm sm:text-base">Real-time multiplayer games!</p>
          <div className={`flex items-center justify-center mt-2 text-xs sm:text-sm ${
            isOnline ? 'text-green-200' : 'text-red-200'
          }`}>
            {isOnline ? <Wifi size={14} className="sm:w-4 sm:h-4" /> : <WifiOff size={14} className="sm:w-4 sm:h-4" />}
            <span className="ml-1">{isOnline ? 'Synced' : 'Offline Mode'}</span>
          </div>
        </div>
        <div className="text-center p-6 sm:p-8 mx-2 sm:mx-0">
          <p className="text-gray-600 text-sm sm:text-base">Games coming soon with real-time sync! 🎮</p>
        </div>
      </div>
    );
  };

  const CreativeZone = () => {
    return (
      <div className="p-2 sm:p-4 max-w-4xl mx-auto">
        <div className="bg-white rounded-2xl sm:rounded-3xl shadow-lg p-6 sm:p-8 text-center mx-2 sm:mx-0">
          <div className="bg-gradient-to-r from-purple-100 to-pink-100 rounded-full w-16 h-16 sm:w-20 sm:h-20 flex items-center justify-center mx-auto mb-4 sm:mb-6">
            <Palette size={28} className="sm:w-9 sm:h-9 text-purple-600" />
          </div>
          <h2 className="text-xl sm:text-2xl font-bold text-gray-800 mb-3 sm:mb-4">🎨 Creative Zone</h2>
          <div className="text-gray-600 space-y-2">
            <p className="text-base sm:text-lg">Creative features coming soon!</p>
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl p-3 sm:p-4 mt-3 sm:mt-4">
              <p className="font-medium text-purple-700 text-sm sm:text-base">Upcoming Features:</p>
              <div className="mt-2 space-y-1 text-xs sm:text-sm">
                <p>🎨 Real-time Collaborative Doodle Board</p>
                <p>😂 Meme Maker with Templates</p>
                <p>📚 Story Builder (Build stories together)</p>
                <p>🎭 Custom Avatar Creator</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Main App Render
  if (!currentUser) {
    return <AuthScreen />;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-pink-50">
      <Navigation />
      <div className="pb-4 sm:pb-8">
        {activeSection === 'chat' && (
          <div className="max-w-4xl mx-auto p-0 sm:p-4">
            <ChatRoom />
          </div>
        )}
        {activeSection === 'games' && <GamesSection />}
        {activeSection === 'creative' && <CreativeZone />}
      </div>
    </div>
  );
};

export default App;
